const result = quizMark.reduce((acc, curr) => {
  const existingStudent = acc.find(item => item.student_id === curr.student_id);
  if (existingStudent) {
    existingStudent.mark += curr.mark;
  } else {
    const id = acc.length > 0 ? acc[acc.length - 1].id + 1 : 1;
    acc.push({
      id,
      student_id: curr.student_id,
      student_name: curr.student_name,
      mark: curr.mark
    });
  }
  return acc;
}, []);

//rank
quizMark.sort((a, b) => b.mark - a.mark);

let previousMark = -1;
let rank = 0;

quizMark.forEach((obj) => {
  if (obj.mark !== previousMark) {
    rank++;
    previousMark = obj.mark;
  }
  obj.rank = rank;
});

quizMark.sort((a, b) => a.student_name.localeCompare(b.student_name));

//quiz marks

{
      "id": 1,
      "student_id": 2,
      "student_name": "Saad Hasan",
      "video_id": 1,
      "video_title": "Debounce Function in JavaScript - JavaScript Job Interview question",
      "totalQuiz": 2,
      "totalCorrect": 1,
      "totalWrong": 1,
      "totalMark": 10,
      "mark": 5
    },
    {
      "student_id": 8,
      "student_name": "Sakil Ahmed",
      "video_id": "2",
      "video_title": "#2 JavaScript Tips and Tricks - JavaScript Job Interview Questions",
      "totalQuiz": 1,
      "totalCorrect": 1,
      "totalWrong": 0,
      "totalMark": 5,
      "mark": 50,
      "id": 2
    }

//assignment marks

 {
      "id": 1,
      "student_id": 2,
      "student_name": "Saad Hasan",
      "assignment_id": 1,
      "title": "Assignment 1 - Implement Debounce Function",
      "createdAt": "2021-01-15T15:17:01.727Z",
      "totalMark": 100,
      "mark": 50,
      "repo_link": "https://github.com/Learn-with-Sumit/assignment-1",
      "status": "pending"
    },
    {
      "id": 2,
      "student_id": 2,
      "student_name": "Saad Hasan",
      "assignment_id": 1,
      "title": "Assignment 2 - Implement Best Practices",
      "createdAt": "2021-01-15T15:17:01.727Z",
      "totalMark": 100,
      "mark": 100,
      "repo_link": "https://github.com/Learn-with-Sumit/assignment-1",
      "status": "published"
    },
    {
      "id": 3,
      "student_id": 3,
      "student_name": "Akash Ahmed",
      "assignment_id": 1,
      "title": "Assignment 2 - Implement Best Practices",
      "createdAt": "2021-01-15T15:17:01.727Z",
      "totalMark": 100,
      "mark": 50,
      "repo_link": "https://github.com/Learn-with-Sumit/assignment-1",
      "status": "published"
    }

//modal  html

<div class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h4>Write, Run & Share HTML code online using OneCompiler's HTML online Code editor for free</h4>
    <form>
      <div class="btndiv">
        <input type="text" placeholder="Github code link">
      </div>
      <div class="btndiv"><button type="submit">Submit</button></div>
    </form>
  </div>

//css
/* The Modal (background) */
.modal {
  display: block; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgba(0,0,0,0.5); /* Black w/ opacity */
  
}

/* Modal Content/Box */
.modal-content {
  background-color: #fefefe;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
  border-radius:5px
}

/* Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

/* Style input and submit button */
form {
  margin-top: 20px;
}
input[type="text"], button[type="submit"] {
  padding: 10px;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  margin-right: 10px;
  width:90%
}
.btndiv{
display:flex;
justify-content: center;
}
button[type="submit"] {
  background-color: #4CAF50;
  color: white;
  cursor: pointer;margin-top:20px;
}
button[type="submit"]:hover {
  background-color: #3e8e41;
}




"quizzes": [
    {
      "id": 1,
      "question": "What is a Debounce function in JavaScript?",
      "video_id": 1,
      "video_title": "Debounce Function in JavaScript - JavaScript Job Interview question",
      "options": [
        {
          "id": 1,
          "option": "A function that is called after a certain time interval",
          "isCorrect": true,
          "checked":false
        },
        {
          "id": 2,
          "option": "A function that is called after a certain time interval",
          "isCorrect": false,
          "checked":false
        },
        {
          "id": 3,
          "option": "A function that is called after a certain time interval",
          "isCorrect": false,
          "checked":true
        },
        {
          "id": 4,
          "option": "A function that is called after a certain time interval",
          "isCorrect": false,
          "checked":true
        }
      ]
    },
    {
      "id": 2,
      "question": "Which of the following is an example of a situation where you would use the Debounce function?",
      "video_id": 1,
      "video_title": "Debounce Function in JavaScript - JavaScript Job Interview question",
      "options": [
        {
          "id": "1",
          "option": "A search bar where the results are displayed as you type.",
          "isCorrect": true,
          "checked":false
        },
        {
          "id": "2",
          "option": "A button that performs an action when clicked.",
          "isCorrect": false,
          "checked":false
        },
        {
          "id": 3,
          "option": "An animation that plays when a user hovers over an element.",
          "isCorrect": false
          ,
          "checked":false
        },
        {
          "id": 4,
          "option": "All of the above.",
          "isCorrect": false,
          "checked":false
        }
      ]
    },
    {
      "id": 3,
      "question": "What is the difference between null and undefined in JavaScript?",
      "video_id": 2,
      "video_title": "#2 JavaScript Tips and Tricks - JavaScript Job Interview Questions",
      "options": [
        {
          "id": 1,
          "option": "null represents the intentional absence of any object value.",
          "isCorrect": true,
          "checked":true
        },
        {
          "id": 2,
          "option": "undefined represents the uninitialized value of a variable or property.",
          "isCorrect": false,
          "checked":false
        },
        {
          "id": 3,
          "option": "Same thing",
          "isCorrect": false,
          "checked":false
        },
        {
          "id": 4,
          "option": "No Difference",
          "isCorrect": false,
          "checked":false
        }
      ]
    },
    {
      "question": "How do you call a function named \"myFun\" ?",
      "video_id": 3,
      "video_title": "3 JavaScript Tips and Tricks - JavaScript Job Interview Questions",
      "options": [
        {
          "id": 1,
          "option": "myFun();",
          "isCorrect": true,
          "checked":true
        },
        {
          "id": 2,
          "option": "myFun{};",
          "isCorrect": false,
          "checked":true
        },
        {
          "id": 3,
          "option": "myFun;",
          "isCorrect": false,
          "checked":false
        },
        {
          "id": 4,
          "option": "myFun[];",
          "isCorrect": false,
          "checked":false
        }
      ],
      "id": 4
    }
  ],